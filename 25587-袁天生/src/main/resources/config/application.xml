<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       					   http://www.springframework.org/schema/beans/spring-beans.xsd
       					   http://www.springframework.org/schema/context
       					   http://www.springframework.org/schema/context/spring-context.xsd">


    <context:property-placeholder location="classpath:config/db.properties"/>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="${db.driver}"/>
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
    </bean>

    <!--    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">-->
    <!--        <property name="dataSource" ref="dataSource"/>-->
    <!--    </bean>-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="config/SqlMapperConfig.xml"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.yts.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 方法一：原始dao接口  -->
    <bean id="orderDao" class="com.yts.dao.OrderDaoImpl">
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>

<!--    &lt;!&ndash; 方法二：mapper配置-->
<!--         MapperFactoryBean:根据mapper接口生成代理对象-->
<!--     &ndash;&gt;-->
<!--    <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">-->
<!--        <property name="mapperInterface" value="com.yts.mapper.UserMapper"/>-->
<!--        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>-->
<!--     </bean>-->

    <!-- 方法三：mapper批量扫描
          从mapper包中扫描出mapper接口，自动创建代理对象并且在spring容器中注册
          遵循规范：将mapper.java和mapper.xml映射文件名称保持一致，且在一个目录中。
         自动扫描出来的mapper的bean的id为mapper类名（首字母小写）
     -->
<!--    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
<!--        &lt;!&ndash; 指定扫描的包名-->
<!--             如果扫描多个包，每个包中间使用半角逗号分隔-->
<!--          &ndash;&gt;-->
<!--        <property name="basePackage" value="joanna.yan.mapper"/>-->
<!--        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->
<!--    </bean>-->
</beans>