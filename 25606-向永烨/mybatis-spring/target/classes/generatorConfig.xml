<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!--导入属性配置 -->

    <!--(mysql)配置数据库链接 -->
    <!--指定特定数据库的jdbc驱动jar包的位置 -->
    <!--<classPathEntry location="D:\\mysql-connector-java-5.0.5.jar" />-->
    <!--
        <classPathEntry location="D:\\workSpace\\maven\\repository\\mysql\\mysql-connector-java\\6.0.6\\mysql-connector-java-6.0.6.jar" />
    -->
    <classPathEntry location="D:/devolpment/Repository/mysql/mysql-connector-java/mysql-connector-java-5.1.38.jar" />

    <!-- context:生成一组对象的环境 id:必选，上下文id，用于在生成错误时提示 defaultModelType:指定生成对象的样式
        1，conditional：类似hierarchical； 2，flat：所有内容（主键，blob）等全部生成在一个对象中； 3，hierarchical：主键生成一个XXKey对象(key
        class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class) targetRuntime: 1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample； introspectedColumnImpl：类全限定名，用于扩展MBG -->
    <context id="default" targetRuntime="MyBatis3">
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin" />
        <plugin type="org.mybatis.generator.plugins.OverIsMergeablePlugin" />
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin" />
        <!-- optional，旨在创建class时，对注释进行控制 -->
        <commentGenerator>
            <property name="suppressAllComments" value="false" />

            <property name="suppressDate" value="true" />
            <!-- 格式化java代码 -->
            <property name="javaFormatter"
                      value="org.mybatis.generator.api.dom.DefaultJavaFormatter" />
            <!-- 格式化XML代码 -->
            <property name="xmlFormatter"
                      value="org.mybatis.generator.api.dom.DefaultXmlFormatter" />
        </commentGenerator>

        <!-- <jdbcConnection driverClass="oracle.jdbc.driver.OracleDriver" connectionURL="jdbc:oracle:thin:@192.168.1.103:1521:tatest"
            userId="gts_crm" password="gts_crm"> </jdbcConnection> <jdbcConnection driverClass="oracle.jdbc.driver.OracleDriver"
            connectionURL="jdbc:oracle:thin:@127.0.0.1:1521:orcl" userId="gts_crm" password="gts_crm">
            </jdbcConnection> -->

        <jdbcConnection driverClass="com.mysql.jdbc.Driver"
                        connectionURL="jdbc:mysql://127.0.0.1:3306/jdbc_test?characterEncoding=utf-8"
                        userId="root" password="root">
        </jdbcConnection>

        <!-- java类型处理器 用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl； 注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和
            NUMERIC数据类型； -->
        <javaTypeResolver
                type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
            <!-- true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型 false：默认, scale>0;length>18：使用BigDecimal;
                scale=0;length[10,18]：使用Long； scale=0;length[5,9]：使用Integer； scale=0;length<5：使用Short； -->
            <property name="forceBigDecimals" value="false" />
            <property name="forceBigDecimalsIdToString" value="true" />
        </javaTypeResolver>

        <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类 targetPackage 指定生成的model生成所在的包名
            targetProject 指定在该项目下所在的路径 -->

        <javaModelGenerator targetPackage="com.yonye.mybatis.pojo"
                            targetProject="D:/project/java/idea_project/SpringDay01/mybatis-demo/src/main/java/com/yonye/mybatis/pojo">
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="truserue" />
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false" />
            <!-- 建立的Model对象是否 不可改变 即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false" />
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true" />
        </javaModelGenerator>

        <!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->
        <sqlMapGenerator targetPackage="mapping"
                         targetProject="src/main/resources">
            <property name="enableSubPackages" value="false" />
        </sqlMapGenerator>


        <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码 type="ANNOTATEDMAPPER",生成Java Model
            和基于注解的Mapper对象 type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象 type="XMLMAPPER",生成SQLMap
            XML文件和独立的Mapper接口 -->
        <javaClientGenerator targetPackage="com.yonye.mybatis.mapper"
                             targetProject="src/main/java" type="XMLMAPPER">
            <property name="enableSubPackages" value="" />
            <!-- 定义Maper.java 源代码中的ByExample() 方法的可视性，可选的值有： public; private; protected;
                default 注意：如果 targetRuntime="MyBatis3",此参数被忽略 -->
            <property name="exampleMethodVisibility" value="" />
            <!-- 方法名计数器 Important note: this property is ignored if the target runtime
                is MyBatis3. -->
            <property name="methodNameCalculator" value="" />
            <!-- 为生成的接口添加父接口 -->
            <property name="rootInterface" value="" />

        </javaClientGenerator>

        <!--
         表名字
           -->
        <table tableName="orders"  domainObjectName="Orders"/>
        <!--<table tableName="sys_userinfo"  domainObjectName="SysUserinfo"/>-->




    </context>
</generatorConfiguration>