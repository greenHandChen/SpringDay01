<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace: 命名空间,用于隔离sql,后期有重要作用 -->
<mapper namespace="test">
    <!--根据用户id查询用户信息
        1.查询使用的是select标签,每一个标签代表着MappedStatement
        2.id是MappedStatement的标识符
        3.parameterType就是输入参数的类型
        4.resultType返回数据类型
        5.#{}相当于占位符
    -->
    <select id="getUserById" parameterType="Integer" resultType="com.frank.domain.User">
        select * from user where id=#{id};
    </select>
    
    <!--根据用户的姓模糊查询用户信息
        ${}:是sql的连接符,如果是基本数据类型那么必须是${value}的形式
        拼接sql存在sql注入的风险
        -->
    <select id="getUserByUsername" parameterType="String" resultType="com.frank.domain.User">
        select * from user where username like ${value};
    </select>

    <!--添加用户,入参是user-->
    <insert id="addUser" parameterType="com.frank.domain.User">
        insert into user(username,birthday,sex,address) values(#{username},#{birthday},#{sex},#{address});
    </insert>

    <!--添加用户返回UUID-->
    <!--
        selectKey:用于查询主键,标签体里面写查询主键的SQL,主键查询SQL根据数据库的不同,法也是不同的
        keyProperty:指的是我们需要映射的字段名称
        resultType:输出参数类型
        order:Before是用来指定查询主键的SQL以及插入SQL的相对顺序,这里相对顺序指的是针对Insert
        LAST_INSERT_ID:必须配合insert语句进行搭配使用
    -->
    <insert id="addUserGetUUID" parameterType="com.frank.domain.User">
        <selectKey keyProperty="uuid" resultType="java.lang.String" order="BEFORE">
            select UUID()
        </selectKey>
        insert into user(id,username,birthday,sex,address,uuid) values(#{id},#{username},#{birthday},#{sex},#{address},#{uuid})
    </insert>

    <!--添加用户返回自增主键-->
    <insert id="addUserGetId" parameterType="com.frank.domain.User">
        <selectKey keyProperty="id" resultType="Integer" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
        insert into user(username,birthday,sex,address) values(#{username},#{birthday},#{sex},#{address});
    </insert>
</mapper>
