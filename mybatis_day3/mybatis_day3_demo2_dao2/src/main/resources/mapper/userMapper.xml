<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 使用mapper代理时，namespace的值，必须要和代理的mapper接口全限定名一致 -->
<mapper namespace="com.mapper.UserMapper">
    <!--根据用户id查询用户信息-->
    <!-- select表示一个MappedStatement -->
    <!-- #{}表示一个占位符 -->
    <!-- #{id}:里面的id表示输入参数的参数名称,如果该参数是简单类型，那么#{}里面的参数类型可以任意 -->
    <!-- parameterType：表示输入参数的java类型 -->
    <!-- resultType:表示输出结果所映射的java类型 -->
    <select id="selectUserById" parameterType="Integer" resultType="com.domain.User">
        select * from user where id=#{id}
    </select>

    <select id="selectUsersByName" parameterType="String" resultType="com.domain.User">
        select * from user where username like #{name}
    </select>

    <insert id="addUser" parameterType="User">
        <selectKey keyProperty="id" resultType="Integer" order="AFTER">
            select last_insert_id()
        </selectKey>
        insert into user(username,birthday,sex,address,manage_id) values(#{username},#{birthday},#{sex},#{address},#{manage_id})
    </insert>
    
    <!-- 综合查询，地址模糊查询，性别，精确查询 -->
    <select id="findUserListByAddressAndSex" parameterType="com.po.UserQueryVO" resultType="User">
        select * from user where address like '%${user.address}%' and sex=#{user.sex}
    </select>

    <!-- Map查询
            使用map中的key
     -->
    <select id="findUserByMap" resultType="User" parameterType="java.util.Map">
        select * from user where username like #{username}
    </select>

    <!-- 简单类型的结果类型映射 -->
    <select id="selectRows" resultType="Integer">
        select count(1) from user
    </select>

    <!-- resultMap的结果映射 -->
    <resultMap id="orderByUserNameResultMap" type="java.util.Map">
        <result column="createtime" property="createtimeKey"/>
        <result column="items_name" property="items_nameKey"/>
        <result column="items_num" property="items_numKey"/>
    </resultMap>

    <!--查询王五的所有订单(显示订单中的items.name,orders.createtime,orderdatail.items_num)
        返回结果集如果有多条,mapper接口中的返回值，需要是List集合
    -->
    <select id="selectOrderByUserName" resultMap="orderByUserNameResultMap" parameterType="String">
        select o.createtime,od.items_num,i.name items_name from items i,orders o,orderdetail od,user u
			where o.user_id=u.id and od.orders_id=o.id and od.items_id=i.id and u.username=#{value}
    </select>

    <!-- 动态sql if,where标签  -->
    <!-- 综合查询时，查询条件要求用户输入，用户名称可以为空。 -->
    <select id="findUserByCondition" parameterType="com.po.UserQueryVO" resultType="User">
        select * from user /*where 1=1*/
        <!-- where标签 -->
        <where>
            <!-- if标签：对用户输入的参数进行判断
                 test：指定判断表达式
             -->
            <if test="user.username !=null and user.username!=''">
                and username like '%${user.username}%'
            </if>
            <if test="user.sex!=null and user.sex!=''">
                and sex like '%${user.sex}%'
            </if>
            <if test="user.address!=null and user.address!=''">
                and address like '%${user.address}%'
            </if>
        </where>
    </select>

    <!-- foreach标签 -->
    <!--open属性：遍历开始时，需要拼接的字符串
        close：便利结束时，需要拼接的字符串
        separator：每一个元素之间的连接符
        colleaction：集合名称
        item：相当于每一个元素的别名
    -->
    <select id="selectIdInCollection" parameterType="com.po.UserQueryVO" resultType="User">
        select * from user
        <choose>
            <when test="idList!=null and idList.size!=0">
                where id in
                <foreach collection="idList" open="(" separator="," close=")" item="id">
                    #{id}
                </foreach>
            </when>
            <otherwise>
                where 1=2
            </otherwise>
        </choose>
    </select>
</mapper>
